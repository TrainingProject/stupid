#ifndef _SKBUFF_H
#define _SKBUFF_H

#include <linux/types.h>
#include <linux/if_ether.h>
#include "netdevice.h"

struct sk_buff {
	struct sk_buff *next;
	struct sk_buff *prev;

	struct net_device *nic;
	int len;
	unsigned short csum;
	unsigned char *data;
};

struct sk_buff_head {
	struct sk_buff *next;
	struct sk_buff *prev;
	int qlen;
};

static inline void skb_queue_head_init(struct sk_buff_head *list)
{
	list->prev = list->next = (struct sk_buff *)list;
	list->qlen = 0;
}

static inline void __skb_insert(struct sk_buff *newsk, struct sk_buff *prev,
				struct  sk_buff *next, struct sk_buff_head *list)
{
	newsk->next = next;
	newsk->prev = prev;
	next->prev = prev->next = newsk;
	list->qlen++;
}

static inline void skb_insert(struct sk_buff *old, struct sk_buff *newsk, struct
			      sk_buff_head *list)
{
	/* atomic operations omitted now */
	__skb_insert(newsk, old, old->next, list);
}

static inline void __skb_queue_after(struct 
static inline void __skb_queue_head(struct sk_buff_head *list,
				    struct sk_buff *newsk)
{
	__skb_queue_after(list, (struct sk_buff *)list, newsk);
}

#endif
